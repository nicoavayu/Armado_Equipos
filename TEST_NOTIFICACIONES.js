// SCRIPT DE TESTING PARA NOTIFICACIONES EN TIEMPO REAL
// Copia este c√≥digo en la consola del navegador para probar

// TEST 1: Verificar que la notificaci√≥n se insert√≥ en la base de datos
const testNotificationInsert = async (userId) => {
  console.log('=== TEST 1: VERIFICAR INSERCI√ìN EN BASE DE DATOS ===');
  
  try {
    const { data, error } = await supabase
      .from('notifications')
      .select('*')
      .eq('user_id', userId)
      .order('created_at', { ascending: false })
      .limit(5);
    
    if (error) {
      console.error('‚ùå Error fetching notifications:', error);
      return;
    }
    
    console.log('‚úÖ √öltimas 5 notificaciones para user:', userId);
    console.table(data.map(n => ({
      id: n.id.substring(0, 8),
      type: n.type,
      title: n.title,
      read: n.read,
      created_at: new Date(n.created_at).toLocaleString()
    })));
    
    const matchInvites = data.filter(n => n.type === 'match_invite');
    console.log(`üìä Match invites encontradas: ${matchInvites.length}`);
    
    return data;
  } catch (error) {
    console.error('‚ùå Test failed:', error);
  }
};

// TEST 2: Verificar suscripci√≥n realtime
const testRealtimeSubscription = (userId) => {
  console.log('=== TEST 2: VERIFICAR SUSCRIPCI√ìN REALTIME ===');
  console.log('üëÇ Escuchando notificaciones para user:', userId);
  
  const subscription = supabase
    .channel(`test-notifications-${userId}`)
    .on('postgres_changes', 
      { 
        event: 'INSERT', 
        schema: 'public', 
        table: 'notifications',
        filter: `user_id=eq.${userId}`,
      }, 
      (payload) => {
        console.log('üîî === NOTIFICACI√ìN RECIBIDA EN TIEMPO REAL ===');
        console.log('üìÖ Timestamp:', new Date().toLocaleTimeString());
        console.log('üë§ Para usuario:', payload.new.user_id);
        console.log('üìù Tipo:', payload.new.type);
        console.log('üí¨ Mensaje:', payload.new.message);
        console.log('üÜî ID:', payload.new.id);
        console.log('‚úÖ REALTIME FUNCIONANDO CORRECTAMENTE');
      }
    )
    .subscribe((status) => {
      console.log('üì° Subscription status:', status);
      if (status === 'SUBSCRIBED') {
        console.log('‚úÖ Suscripci√≥n activa - esperando notificaciones...');
      } else if (status === 'CHANNEL_ERROR') {
        console.error('‚ùå Error en el canal - realtime NO funciona');
      }
    });
  
  // Limpiar despu√©s de 30 segundos
  setTimeout(() => {
    supabase.removeChannel(subscription);
    console.log('üõë Test de realtime terminado');
  }, 30000);
  
  return subscription;
};

// TEST 3: Insertar notificaci√≥n de prueba
const testInsertNotification = async (recipientUserId, senderName = 'Test User') => {
  console.log('=== TEST 3: INSERTAR NOTIFICACI√ìN DE PRUEBA ===');
  
  const testNotification = {
    user_id: recipientUserId,
    type: 'match_invite',
    title: 'Test - Invitaci√≥n a partido',
    message: `${senderName} te invit√≥ a un partido de prueba`,
    data: {
      matchId: 999,
      matchName: 'Partido de Prueba',
      inviterId: 'test-sender-id',
      inviterName: senderName,
    },
    read: false,
  };
  
  console.log('üì§ Insertando notificaci√≥n de prueba para:', recipientUserId);
  
  try {
    const { data, error } = await supabase
      .from('notifications')
      .insert([testNotification])
      .select()
      .single();
    
    if (error) {
      console.error('‚ùå Error insertando notificaci√≥n:', error);
      return;
    }
    
    console.log('‚úÖ Notificaci√≥n insertada exitosamente:');
    console.log('üÜî ID:', data.id);
    console.log('üë§ Para usuario:', data.user_id);
    console.log('üìù Tipo:', data.type);
    console.log('‚è∞ Creada:', new Date(data.created_at).toLocaleString());
    console.log('üîî El usuario deber√≠a recibir esta notificaci√≥n en tiempo real');
    
    return data;
  } catch (error) {
    console.error('‚ùå Test failed:', error);
  }
};

// FUNCI√ìN COMPLETA DE TESTING
const runFullNotificationTest = async (recipientUserId, senderName = 'Test User') => {
  console.log('üöÄ === INICIANDO TEST COMPLETO DE NOTIFICACIONES ===');
  console.log('üë§ Usuario receptor:', recipientUserId);
  console.log('üë§ Usuario emisor:', senderName);
  
  // 1. Verificar notificaciones existentes
  await testNotificationInsert(recipientUserId);
  
  // 2. Configurar listener de realtime
  const subscription = testRealtimeSubscription(recipientUserId);
  
  // 3. Esperar 2 segundos y luego insertar notificaci√≥n de prueba
  setTimeout(async () => {
    await testInsertNotification(recipientUserId, senderName);
  }, 2000);
  
  console.log('‚è≥ Test en progreso... Revisa los logs en los pr√≥ximos 30 segundos');
  
  return subscription;
};

// INSTRUCCIONES DE USO:
console.log(`
üîß === INSTRUCCIONES PARA TESTING ===

1. Para verificar notificaciones existentes:
   testNotificationInsert('user-uuid-aqui')

2. Para escuchar notificaciones en tiempo real:
   testRealtimeSubscription('user-uuid-aqui')

3. Para insertar una notificaci√≥n de prueba:
   testInsertNotification('recipient-user-uuid', 'Nombre del Emisor')

4. Para ejecutar test completo:
   runFullNotificationTest('recipient-user-uuid', 'Nombre del Emisor')

üìù PASOS PARA PROBAR CON DOS USUARIOS:

1. Usuario A (emisor): Abre la app y obt√©n su user ID
2. Usuario B (receptor): Abre la app en otra pesta√±a/navegador
3. En la consola del Usuario B, ejecuta:
   testRealtimeSubscription('user-id-del-usuario-b')
4. Usuario A invita al Usuario B a un partido
5. Usuario B deber√≠a ver la notificaci√≥n en tiempo real en la consola
6. Verificar que aparece en el panel de notificaciones del Usuario B

üêõ SI NO FUNCIONA, REVISAR:
- ‚úÖ RLS policies permiten INSERT y SELECT
- ‚úÖ Tabla notifications est√° en supabase_realtime publication
- ‚úÖ user_id en la notificaci√≥n es el UUID correcto del destinatario
- ‚úÖ Suscripci√≥n realtime est√° activa (status: SUBSCRIBED)
`);

// Exportar funciones para uso global
window.testNotificationInsert = testNotificationInsert;
window.testRealtimeSubscription = testRealtimeSubscription;
window.testInsertNotification = testInsertNotification;
window.runFullNotificationTest = runFullNotificationTest;